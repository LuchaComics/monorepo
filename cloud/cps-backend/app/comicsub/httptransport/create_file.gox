package httptransport

import (
	"context"
	"log"
	"net/http"

	a_c "github.com/LuchaComics/monorepo/cloud/cps-backend/app/comicsub/controller"
	"github.com/LuchaComics/monorepo/cloud/cps-backend/utils/httperror"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

func UnmarshalCreateFileAttachmentRequest(ctx context.Context, r *http.Request) (*a_c.ComicSubmissionFileAttachmentCreateRequestIDO, error) {
	defer r.Body.Close()

	// Parse the multipart form data
	err := r.ParseMultipartForm(32 << 20) // Limit the maximum memory used for parsing to 32MB
	if err != nil {
		log.Println("UnmarshalCreateRequest:ParseMultipartForm:err:", err)
		return nil, err
	}

	// Get the values of form fields
	name := r.FormValue("name")
	description := r.FormValue("description")

	// Get the uploaded file from the request
	file, header, err := r.FormFile("file")
	if err != nil {
		log.Println("UnmarshalCmsImageCreateRequest:FormFile:err:", err)
		// return nil, err, http.StatusInternalServerError
	}

	// Initialize our array which will store all the results from the remote server.
	requestData := &a_c.ComicSubmissionFileAttachmentCreateRequestIDO{
		Name:        name,
		Description: description,
	}

	if header != nil {
		// Extract filename and filetype from the file header
		requestData.FileName = header.Filename
		requestData.FileType = header.Header.Get("Content-Type")
		requestData.File = file
	}
	return requestData, nil
}

func (h *Handler) CreateFileAttachment(w http.ResponseWriter, r *http.Request, submissionIDStr string) {
	ctx := r.Context()

	csid, err := primitive.ObjectIDFromHex(submissionIDStr)
	if err != nil {
		log.Println("UnmarshalCmsImageCreateRequest: primitive.ObjectIDFromHex:err:", err)
	}

	data, err := UnmarshalCreateFileAttachmentRequest(ctx, r)
	if err != nil {
		httperror.ResponseError(w, err)
		return
	}
	data.SubmissionID = csid

	user, err := h.Controller.CreateFileAttachment(ctx, data)
	if err != nil {
		httperror.ResponseError(w, err)
		return
	}

	MarshalCreateResponse(user, w)
}
