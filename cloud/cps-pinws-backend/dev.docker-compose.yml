# HOW TO USE:
# The purpose of this docker-compose is to setup our application which is
# dependent on the `MongoDB` database cluster running concurrently with this
# server for developer purposes. This configuration has hot-reloading activated.
#
# $ docker-compose -p cps_pinws -f dev.docker-compose.yml up   #
#

services:
  db1:
    container_name: cps_pinws_db1
    image: mongo:7.0
    command:
      [
        "--replSet",
        "rs0",
        "--bind_ip_all",
        "--port",
        "27017",
        "--quiet",
        "--logpath",
        "/dev/null",
      ]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "db1_data:/data/db"
      - "db1_config:/data/configdb"

  db2:
    container_name: cps_pinws_db2
    image: mongo:7.0
    command:
      [
        "--replSet",
        "rs0",
        "--bind_ip_all",
        "--port",
        "27018",
        "--quiet",
        "--logpath",
        "/dev/null",
      ]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "db2_data:/data/db"
      - "db2_config:/data/configdb"

  db3:
    container_name: cps_pinws_db3
    image: mongo:7.0
    command:
      [
        "--replSet",
        "rs0",
        "--bind_ip_all",
        "--port",
        "27019",
        "--quiet",
        "--logpath",
        "/dev/null",
      ]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "db3_data:/data/db"
      - "db3_config:/data/configdb"

  mongo-express:
    container_name: cps_pinws_db_admin
    image: mongo-express:latest
    environment:
      - ME_CONFIG_MONGODB_SERVER=db1
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_URI=mongodb://db1:27017,db2:27018,db3:27019/?replicaSet=rs0
    ports:
      - "8081:8081"
    depends_on:
      - db1
      - db2
      - db3
    links:
      - db1
      - db2
      - db3
    restart: unless-stopped

  # ipfs:
  #   container_name: cps_ipfs_node
  #   image: ipfs/kubo:master-latest
  #   restart: unless-stopped
  #   volumes:
  #     - ./data:/data/ipfs
  #     - ./data:/ipfs
  #     - ./data:/ipns
  #   environment:
  #     - IPFS_PATH=/data/ipfs
  #   ports:
  #     # Swarm listens on all interfaces, so is remotely reachable.
  #     - 4001:4001/tcp
  #     - 4001:4001/udp
  #
  #     # The following ports only listen on the loopback interface, so are not remotely reachable by default.
  #     # If you want to override these or add more ports, see https://docs.docker.com/compose/extends/ .
  #
  #     # API port, which includes admin operations, so you probably don't want this remotely accessible.
  #     - 127.0.0.1:5001:5001
  #
  #     # HTTP Gateway
  #     - 127.0.0.1:8080:8080

  # The main application.
  app:
    container_name: cps_pinws_backend_app
    stdin_open: true
    environment:
      CPS_PINWS_BACKEND_APP_IS_DEVELOPER_MODE: ${CPS_PINWS_BACKEND_APP_IS_DEVELOPER_MODE} # 'True' means we are running server for development, false means we are running production.
      CPS_PINWS_BACKEND_IP: 0.0.0.0
      CPS_PINWS_BACKEND_PORT: 8000
      CPS_PINWS_BACKEND_HMAC_SECRET: ${CPS_PINWS_BACKEND_HMAC_SECRET}
      CPS_PINWS_BACKEND_HAS_DEBUGGING: ${CPS_PINWS_BACKEND_HAS_DEBUGGING}
      CPS_PINWS_BACKEND_CACHE_URI: ${CPS_PINWS_BACKEND_CACHE_URI}
      CPS_PINWS_BACKEND_DB_URI: mongodb://db1:27017,db2:27018,db3:27019/?replicaSet=rs0 # This is dependent on the configuration in our docker-compose file (see above).
      CPS_PINWS_BACKEND_DB_NAME: ${CPS_PINWS_BACKEND_DB_NAME}
      CPS_PINWS_BACKEND_AWS_ACCESS_KEY: ${CPS_PINWS_BACKEND_AWS_ACCESS_KEY}
      CPS_PINWS_BACKEND_AWS_SECRET_KEY: ${CPS_PINWS_BACKEND_AWS_SECRET_KEY}
      CPS_PINWS_BACKEND_AWS_ENDPOINT: ${CPS_PINWS_BACKEND_AWS_ENDPOINT}
      CPS_PINWS_BACKEND_AWS_REGION: ${CPS_PINWS_BACKEND_AWS_REGION}
      CPS_PINWS_BACKEND_AWS_BUCKET_NAME: ${CPS_PINWS_BACKEND_AWS_BUCKET_NAME}
      CPS_PINWS_BACKEND_INITIAL_ADMIN_EMAIL: ${CPS_PINWS_BACKEND_INITIAL_ADMIN_EMAIL} # Required email for root admin when project starts up
      CPS_PINWS_BACKEND_INITIAL_ADMIN_PASSWORD: ${CPS_PINWS_BACKEND_INITIAL_ADMIN_PASSWORD} # Required password for root admin when project starts up
      CPS_PINWS_BACKEND_INITIAL_ADMIN_ORG_NAME: ${CPS_PINWS_BACKEND_INITIAL_ADMIN_ORG_NAME}
      CPS_PINWS_BACKEND_DOMAIN_NAME: ${CPS_PINWS_BACKEND_DOMAIN_NAME}
      CPS_PINWS_BACKEND_API_DOMAIN_NAME: ${CPS_PINWS_BACKEND_API_DOMAIN_NAME}
      CPS_PINWS_BACKEND_APP_DOMAIN_NAME: ${CPS_PINWS_BACKEND_APP_DOMAIN_NAME}
      AWS_ACCESS_KEY: ${CPS_PINWS_BACKEND_AWS_ACCESS_KEY} # AWS SDK requires this exact name.
      AWS_SECRET_KEY: ${CPS_PINWS_BACKEND_AWS_SECRET_KEY} # AWS SDK requires this exact name.
      AWS_REGION: ${CPS_PINWS_BACKEND_AWS_REGION} # AWS SDK requires this exact name.
      CPS_PINWS_BACKEND_PDF_BUILDER_CBFF_TEMPLATE_FILE_PATH: ${CPS_PINWS_BACKEND_PDF_BUILDER_CBFF_TEMPLATE_FILE_PATH}
      CPS_PINWS_BACKEND_PDF_BUILDER_PC_TEMPLATE_FILE_PATH: ${CPS_PINWS_BACKEND_PDF_BUILDER_PC_TEMPLATE_FILE_PATH}
      CPS_PINWS_BACKEND_PDF_BUILDER_CCIMG_TEMPLATE_FILE_PATH: ${CPS_PINWS_BACKEND_PDF_BUILDER_CCIMG_TEMPLATE_FILE_PATH}
      CPS_PINWS_BACKEND_PDF_BUILDER_CCSC_TEMPLATE_FILE_PATH: ${CPS_PINWS_BACKEND_PDF_BUILDER_CCSC_TEMPLATE_FILE_PATH}
      CPS_PINWS_BACKEND_PDF_BUILDER_CC_TEMPLATE_FILE_PATH: ${CPS_PINWS_BACKEND_PDF_BUILDER_CC_TEMPLATE_FILE_PATH}
      CPS_PINWS_BACKEND_PDF_BUILDER_CCUG_TEMPLATE_FILE_PATH: ${CPS_PINWS_BACKEND_PDF_BUILDER_CCUG_TEMPLATE_FILE_PATH}
      CPS_PINWS_BACKEND_PDF_BUILDER_DATA_DIRECTORY_PATH: ${CPS_PINWS_BACKEND_PDF_BUILDER_DATA_DIRECTORY_PATH} # The directory to save our generated PDF files before we upload to S3.
      CPS_PINWS_BACKEND_MAILGUN_API_KEY: ${CPS_PINWS_BACKEND_MAILGUN_API_KEY}
      CPS_PINWS_BACKEND_MAILGUN_DOMAIN: ${CPS_PINWS_BACKEND_MAILGUN_DOMAIN}
      CPS_PINWS_BACKEND_MAILGUN_API_BASE: ${CPS_PINWS_BACKEND_MAILGUN_API_BASE}
      CPS_PINWS_BACKEND_MAILGUN_SENDER_EMAIL: ${CPS_PINWS_BACKEND_MAILGUN_SENDER_EMAIL}
      CPS_PINWS_BACKEND_MAILGUN_MAINTENANCE_EMAIL: ${CPS_PINWS_BACKEND_MAILGUN_MAINTENANCE_EMAIL}
      CPS_PINWS_BACKEND_PAYMENT_PROCESSOR_SECRET_KEY: ${CPS_PINWS_BACKEND_PAYMENT_PROCESSOR_SECRET_KEY}
      CPS_PINWS_BACKEND_PAYMENT_PROCESSOR_PUBLIC_KEY: ${CPS_PINWS_BACKEND_PAYMENT_PROCESSOR_PUBLIC_KEY}
      CPS_PINWS_BACKEND_PAYMENT_PROCESSOR_WEBHOOK_SECRET_KEY: ${CPS_PINWS_BACKEND_PAYMENT_PROCESSOR_WEBHOOK_SECRET_KEY}
      CPS_PINWS_BACKEND_APP_ENABLE_2FA_ON_REGISTRATION: ${CPS_PINWS_BACKEND_APP_ENABLE_2FA_ON_REGISTRATION}
    build:
      context: .
      dockerfile: ./dev.Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
      # - "4001:4001"
      # - "4002:4002/udp"
      # - "4003:4003"
      # - "5001:5001"
      # - "8080:8080"
    depends_on:
      - db1
      - db2
      - db3
    links:
      - db1
      - db2
      - db3
      # - ipfs
    volumes: # Connect the local filesystem with the docker filesystem. DO NOT REMOVE.
      - ./:/go/src/github.com/LuchaComics/monorepo/cloud/cps-pinws-backend # IMPORTANT: Required for hotreload via `CompileDaemon`.
    cap_add: # See: https://github.com/AdguardTeam/AdGuardHome/issues/5903
      - NET_ADMIN

volumes:
  db1_data:
  db2_data:
  db3_data:
  db1_config:
  db2_config:
  db3_config:
